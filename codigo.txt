controllers:
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\controllers\AddressController.java
package com.api.managepersonaddresses.controllers;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.api.managepersonaddresses.models.AddressModel;
import com.api.managepersonaddresses.models.PersonModel;
import com.api.managepersonaddresses.repositories.AddressRepository;
import com.api.managepersonaddresses.repositories.PersonRepository;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;


@RestController
@RequestMapping("/address")
public class AddressController {

  private final AddressRepository repository;
  private final PersonRepository personRepository;

  public AddressController(AddressRepository repository, PersonRepository personRepository) {
    this.repository = repository;
    this.personRepository = personRepository;
  }

  @GetMapping
  public ResponseEntity<List<AddressModel>> findAll() {
    List<AddressModel> result = repository.findAll();
    return ResponseEntity.ok(result);
  }
  

  @GetMapping(value = "/page")
  public ResponseEntity<Page<AddressModel>> findAllPage(Pageable pageable) {
    Page<AddressModel> result = repository.findAll(pageable);
    return ResponseEntity.ok(result);
  }

  @PostMapping
  public ResponseEntity<AddressModel> create(@RequestParam("personId") Integer personId,
      @RequestBody AddressModel address) {
    Optional<PersonModel> person = personRepository.findById(personId);
    if (!person.isPresent()) {
      return ResponseEntity.badRequest().build();
    }
    address.setPerson(person.get());
    AddressModel result = repository.save(address);
    return ResponseEntity.ok(result);
  }
  
  @GetMapping("{personId}")
public ResponseEntity<List<AddressModel>> encontrarEnderecosPorPessoa(@PathVariable("personId") Integer personId) {
    Optional<PersonModel> person = personRepository.findById(personId);
    if(!person.isPresent()) {
        return ResponseEntity.badRequest().build();
    }
    List<AddressModel> addresses = repository.findByPerson(person.get());
    return ResponseEntity.ok(addresses);
}


@GetMapping(value = "/main/{personId}")
public ResponseEntity<Map<String, Object>> findMainAddressByPersonId(@PathVariable Integer personId) {
    Optional<AddressModel> address = repository.findByPersonIdAndMainTrue(personId);
    if(!address.isPresent()) {
        return ResponseEntity.notFound().build();
    }
    Map<String, Object> response = new HashMap<>();
    response.put("id", address.get().getId());
    response.put("city", address.get().getCity());
    response.put("main", address.get().getMain());
    response.put("number", address.get().getNumber());
    response.put("publicPlace", address.get().getPublicPlace());
    response.put("zipCode", address.get().getZipCode());
    return ResponseEntity.ok(response);
}

}
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\controllers\PersonManegerAddress.java
package com.api.managepersonaddresses.controllers;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.api.managepersonaddresses.dtos.AddressDto;
import com.api.managepersonaddresses.dtos.PersonDto;
import com.api.managepersonaddresses.models.AddressModel;
import com.api.managepersonaddresses.models.PersonModel;
import com.api.managepersonaddresses.repositories.AddressRepository;
import com.api.managepersonaddresses.services.AddressService;
import com.api.managepersonaddresses.services.PersonService;

import jakarta.validation.Valid;
import org.springframework.web.bind.annotation.PutMapping;


@RestController
@CrossOrigin(origins = "*", maxAge = 3600)
@RequestMapping("/person-manager")
public class PersonManegerAddress {

  final PersonService person;
  final AddressService address;
  final AddressRepository addressRepository;

  public PersonManegerAddress(PersonService person, AddressService address, AddressRepository addressRepository) {
    this.person = person;
    this.address = address;
    this.addressRepository = addressRepository;
  }

  @PostMapping
  public ResponseEntity<Object> createPerson(@RequestBody @Valid PersonDto personDto) {

    if (person.existsByName(personDto.getName())) {
      return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Person already exists");
    }

    var personModel = new PersonModel();
    BeanUtils.copyProperties(personDto, personModel);
    var addresses = new ArrayList<AddressModel>();
    for (AddressDto addressDto : personDto.getAddresses()) {
      var addressModel = new AddressModel();
      BeanUtils.copyProperties(addressDto, addressModel);
      addressModel.setPerson(personModel);
      addresses.add(addressModel);
    }
    personModel.setAddresses(addresses);

    personModel = person.save(personModel);

    for (AddressModel address : addresses) {
      address.setPerson(personModel);
      addressRepository.save(address);
    }

    return ResponseEntity.status(HttpStatus.CREATED).body(personModel);
  }
  
  @GetMapping
  public ResponseEntity<List<PersonModel>> getAllPeople() {
    return ResponseEntity.ok(person.findAll());
  }
  
  
  @GetMapping("/{id}")
  public ResponseEntity<Object> getPersonById(@PathVariable(value = "id") Integer id) {
    Optional<PersonModel> personModelOptional = (Optional<PersonModel>) person.findById(id);
    if (!personModelOptional.isPresent()) {
      return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Person not found");
    }
    return ResponseEntity.ok(personModelOptional.get());
  }
  
  @PutMapping("{id}")
  public ResponseEntity<Object> updatePerson(
   @PathVariable(value = "id") Integer id,
   @RequestBody @Valid PersonDto personDto) {
    Optional<PersonModel> personModelOptional = person.findById(id);
    if (!personModelOptional.isPresent()) {
      return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Person not found");
    }
    var personModel = personModelOptional.get();
    personModel.setName(personDto.getName());
    personModel.setBirthDate(personDto.getBirthDate());
    
    var res = person.save(personModel);
    return ResponseEntity.status(HttpStatus.OK).body(res);

}

}
dtos:
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\dtos\AddressDto.java
package com.api.managepersonaddresses.dtos;

import jakarta.validation.constraints.NotBlank;

public class AddressDto {
  private Integer id;


    @NotBlank
    private boolean main;

    @NotBlank
    private String publicPlace;

    @NotBlank
    private String zipCode;

    @NotBlank
    private String number;

    @NotBlank
    private String city;


    private Integer personId;


  public Integer getId() {
    return this.id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public boolean isMain() {
    return this.main;
  }

  public boolean getMain() {
    return this.main;
  }

  public void setMain(boolean main) {
    this.main = main;
  }

  public String getPublicPlace() {
    return this.publicPlace;
  }

  public void setPublicPlace(String publicPlace) {
    this.publicPlace = publicPlace;
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }

  public String getNumber() {
    return this.number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public String getCity() {
    return this.city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public Integer getPersonId() {
    return this.personId;
  }

  public void setPersonId(Integer personId) {
    this.personId = personId;
  }
   

    
}
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\dtos\PersonDto.java
package com.api.managepersonaddresses.dtos;


import java.io.Serializable;
import java.util.List;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

public class PersonDto implements Serializable {
    private Integer id;

    @NotBlank
    private String name;   
    private String birthDate;    
    @NotEmpty
    @NotNull
    private List<AddressDto> addresses;
    public PersonDto(String string, String string2) {
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(String birthDate) {
        this.birthDate = birthDate;
    }
    
    public List<AddressDto> getAddresses() {
        return addresses;
    }

    public void setAddresses(List<AddressDto> addresses) {
        this.addresses = addresses;
    }
}
models:
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\models\AddressModel.java
package com.api.managepersonaddresses.models;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;



@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
@Entity
@Table(name = "address")
public class AddressModel {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "AddressModel_SEQ")
    @SequenceGenerator(sequenceName = "AddressModel_SEQ", allocationSize = 1, name = "AddressModel_SEQ")
    private Integer id;

    private String city;
    private boolean main;
    private String number;
    private String publicPlace;
    private String zipCode;

    @ManyToOne
    private PersonModel person;


  public AddressModel(Integer id, String city, boolean main, String number, String publicPlace, String zipCode, PersonModel person) {
    this.id = id;
    this.city = city;
    this.main = main;
    this.number = number;
    this.publicPlace = publicPlace;
    this.zipCode = zipCode;
    this.person = person;
  }
  

    public AddressModel(String string, String city2, String string2, String number2, String publicPlace2, String zipCode2,
      String string3) {
  }


    public AddressModel() {
    }


    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public boolean isMain() {
        return main;
    }

  public boolean getMain() {
    return this.main;
  }

  public void setMain(boolean main) {
    this.main = main;
  }

  public String getNumber() {
    return this.number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public String getPublicPlace() {
    return this.publicPlace;
  }

  public void setPublicPlace(String publicPlace) {
    this.publicPlace = publicPlace;
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }

  public PersonModel getPerson() {
    return this.person;
  }

  public void setPerson(PersonModel person) {
    this.person = person;
  }




  }
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\models\PersonModel.java
package com.api.managepersonaddresses.models;


import java.io.Serializable;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;


@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
@Entity
public class PersonModel implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    
    @Column(name = "name", nullable = false, length = 45)
    private String name;
    
    @Column(name = "birthDate", nullable = false,length = 10)
    private String birthDate;

    @OneToMany(mappedBy = "person")
    private List<AddressModel> addresses;
    
    public PersonModel(String string) {
    }
    
    public PersonModel(String string, String string2) {
    }
    
    public PersonModel(Integer id, String name, String birthDate, List<AddressModel> addresses) {
        this.id = id;
        this.name = name;
        this.birthDate = birthDate;
        this.addresses = addresses;
    }
    
    public PersonModel() {
    }

    public Integer getId() {
        return id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getBirthDate() {
        return birthDate;
    }
    
    public void setBirthDate(String birthDate) {
        this.birthDate = birthDate;
    }
    
    public List<AddressModel> getAddresses() {
        return addresses;
    }
    
    public void setAddresses(List<AddressModel> addresses) {
        this.addresses = addresses;
    }
}
repositories:
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\repositories\AddressRepository.java
package com.api.managepersonaddresses.repositories;
import java.util.List;
import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Component;
import com.api.managepersonaddresses.models.AddressModel;
import com.api.managepersonaddresses.models.PersonModel;


@Component
public interface AddressRepository extends JpaRepository<AddressModel, Integer> { 

  List<AddressModel> findByPerson(PersonModel person);

  AddressModel findByPersonAndMain(Integer personId, boolean main);

  Optional<AddressModel> findByPersonIdAndMainTrue(Integer personId);
  List<AddressModel> findByPersonIdAndMainFalse(Integer personId); 
  
}
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\repositories\PersonRepository.java
package com.api.managepersonaddresses.repositories;

import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import com.api.managepersonaddresses.models.PersonModel;


public interface PersonRepository extends JpaRepository<PersonModel, Integer> {
  
  boolean existsByName(String name);

  Optional<PersonModel> findById(Integer id);

}
services:
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\services\AddressService.java
package com.api.managepersonaddresses.services;


import org.springframework.stereotype.Service;

import com.api.managepersonaddresses.models.AddressModel;
import com.api.managepersonaddresses.repositories.AddressRepository;


@Service
public class AddressService {


  final AddressRepository addressRepository;

  public AddressService(AddressRepository addressRepository) {
    this.addressRepository = addressRepository;
  }


  public AddressModel save(AddressModel addressModel) {
    return addressRepository.save(addressModel);
    }


    public void addAddress(AddressModel address) {
      addressRepository.save(address);
  }

  public void updateAddress(AddressModel address) {
      addressRepository.save(address);
  }
}
C:\dev\manage-person-addresses\src\main\java\com\api\managepersonaddresses\services\PersonService.java
package com.api.managepersonaddresses.services;


import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.api.managepersonaddresses.models.PersonModel;
import com.api.managepersonaddresses.repositories.PersonRepository;


@Service
public class PersonService {

  private final PersonRepository personRepository;

  public PersonService(PersonRepository personRepository) {
    this.personRepository = personRepository;
  }

  @Transactional
  public PersonModel save(PersonModel personModel) {
    return personRepository.save(personModel);
  }

  public boolean existsByName(String name) {
    return personRepository.existsByName(name);
  }

  public List<PersonModel> findAll() {
    return personRepository.findAll();
  }

  public Optional<PersonModel> findById(Integer id) {
    return personRepository.findById(id);
  }

  public void addPerson(PersonModel person) {
    personRepository.save(person);
  }

  
}
main:
C:\dev\manage-person-addresses\src\test\java\com\api\managepersonaddresses\ManagePersonAddressesApplication.java
package com.api.managepersonaddresses;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ManagePersonAddressesApplication {

	public static void main(String[] args) {
		SpringApplication.run(ManagePersonAddressesApplication.class, args);
	}

}

teste:
C:\dev\manage-person-addresses\src\test\java\com\api\managepersonaddresses\models\AddressModelTest.java
package com.api.managepersonaddresses.models;

import static org.junit.Assert.assertNotNull;

import org.junit.Test;

public class AddressModelTest {

  @Test
  public void testCreateAddressModel() {
    AddressModel address = new AddressModel("Rua 1", "123", "Bairro", "Cidade", "Estado", "Pais", "CEP");

    assertNotNull(address);

  }


  

}
C:\dev\manage-person-addresses\src\test\java\com\api\managepersonaddresses\models\PersonModelTest.java
package com.api.managepersonaddresses.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import jakarta.transaction.Transactional;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class PersonModelTest {

  @Test
  public void testCreatePersonModel() {
    PersonModel person = new PersonModel(null, "John Doe", "01/01/2000", null);

    assertNotNull(person);
    assertEquals("John Doe", person.getName());
    assertEquals("01/01/2000", person.getBirthDate());
    assertNull(person.getAddresses());
  }
  @Test
  public void testSetPersonModelProperties() {
    PersonModel person = new PersonModel();
    person.setName("John Doe");
    person.setBirthDate("01/01/2000");
    person.setAddresses(null);

    assertEquals("John Doe", person.getName());
    assertEquals("01/01/2000", person.getBirthDate());
    assertNull(person.getAddresses());
  }
 
}
services:
C:\dev\manage-person-addresses\src\test\java\com\api\managepersonaddresses\services\AddressServiceTest.java
package com.api.managepersonaddresses.services;

import static org.assertj.core.api.Assertions.assertThat;


import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import com.api.managepersonaddresses.models.AddressModel;
import com.api.managepersonaddresses.repositories.AddressRepository;

@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class AddressServiceTest {
  @Autowired
  private AddressService addressService;
  @Autowired
  private AddressRepository addressRepository;

  @Test
  public void testAddAddress() {
    AddressModel address = new AddressModel("Rua 1", "123", "Bairro", "Cidade", "Estado", "Pais", "CEP");

    addressService.addAddress(address);

    assertThat(addressRepository.findAll()).contains(address);
  }
  @Test
    public void testUpdateAddress() {
        AddressModel address = new AddressModel("Rua 1", "123", "Bairro", "Cidade", "Estado", "Pais", "CEP");
        address = addressRepository.save(address);

        address.setPublicPlace("Rua 2");
        addressService.updateAddress(address);
    assertThat(addressRepository.findById(address.getId()).get().getPublicPlace()).isEqualTo("Rua 2");
}



}
C:\dev\manage-person-addresses\src\test\java\com\api\managepersonaddresses\services\PersonServiceTest.java
package com.api.managepersonaddresses.services;

import static org.assertj.core.api.Assertions.assertThat;


import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.transaction.annotation.Transactional;

import com.api.managepersonaddresses.models.PersonModel;
import com.api.managepersonaddresses.repositories.PersonRepository;


@RunWith(SpringRunner.class)
@SpringBootTest
@Transactional
public class PersonServiceTest {
  @Autowired
  private PersonService personService;
  @Autowired
  private PersonRepository personRepository;

  @Test
  public void testSave() {
    
    PersonModel person = new PersonModel("Nome");

    personService.save(person);

    assertThat(personRepository.findById(person.getId()).get()).isEqualTo(person);
  }
  @Test
  @Transactional
  public void testUpdatePerson() {
    PersonModel person = new PersonModel("John Doe");
    personRepository.save(person);

    person.setName("Jane Doe");
    personService.save(person);

    assertThat(personRepository.findById(person.getId()).get().getName()).isEqualTo("Jane Doe");

  }
  
}
